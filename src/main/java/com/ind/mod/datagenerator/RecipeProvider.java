package com.ind.mod.datagenerator;

import com.ind.mod.StoneWoodIndustry;
import com.ind.mod.block.ModBlocks;
import com.ind.mod.item.ModItems;
import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.minecraft.block.Blocks;
import net.minecraft.data.server.recipe.RecipeJsonProvider;
import net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder;
import net.minecraft.data.server.recipe.ShapelessRecipeJsonBuilder;
import net.minecraft.item.Items;
import net.minecraft.recipe.book.RecipeCategory;
import net.minecraft.util.Identifier;

import java.util.function.Consumer;

public class RecipeProvider extends FabricRecipeProvider {
    public RecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(Consumer<RecipeJsonProvider> exporter) {
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ACACIA_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.ACACIA_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ACACIA_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.ACACIA_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ACACIA_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.ACACIA_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ACACIA_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.ACACIA_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_leggings"));
        
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BIRCH_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BIRCH_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BIRCH_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.BIRCH_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BIRCH_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.BIRCH_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BIRCH_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BIRCH_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_leggings"));
        
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.JUNGLE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.JUNGLE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.JUNGLE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.JUNGLE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.JUNGLE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.JUNGLE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.JUNGLE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.JUNGLE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CHERRY_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.CHERRY_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CHERRY_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .input('#', Blocks.CHERRY_PLANKS)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CHERRY_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.CHERRY_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CHERRY_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.CHERRY_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DARK_OAK_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DARK_OAK_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DARK_OAK_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DARK_OAK_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SPRUCE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.SPRUCE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SPRUCE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.SPRUCE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SPRUCE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.SPRUCE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SPRUCE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.SPRUCE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.MANGROVE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.MANGROVE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.MANGROVE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.MANGROVE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.MANGROVE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.MANGROVE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.MANGROVE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.MANGROVE_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OAK_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OAK_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OAK_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OAK_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.OAK_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SMOOTH_STONE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.SMOOTH_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SMOOTH_STONE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .input('#', Blocks.SMOOTH_STONE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SMOOTH_STONE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.SMOOTH_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SMOOTH_STONE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.SMOOTH_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.STONE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "stone_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.STONE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Blocks.STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "stone_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.STONE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "stone_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.STONE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "stone_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SMOOTH_STONE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.SMOOTH_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SMOOTH_STONE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.SMOOTH_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.SMOOTH_STONE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.SMOOTH_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.SMOOTH_STONE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.SMOOTH_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.SMOOTH_STONE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.SMOOTH_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SMOOTH_STONE_STAIRS)
                .pattern("#  ")
                .pattern("## ")
                .pattern("###")
                .input('#', Blocks.SMOOTH_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_stairs"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.REDSTONE, ModBlocks.SMOOTH_STONE_PRESSURE_PLATE)
                .pattern("##")
                .input('#', Blocks.SMOOTH_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_pressure_plate"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.REDSTONE, ModBlocks.SMOOTH_STONE_BUTTON)
                .input(Items.SMOOTH_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SMOOTH_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "smooth_stone_pressure_button"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BLACKSTONE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BLACKSTONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BLACKSTONE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .input('#', Blocks.BLACKSTONE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BLACKSTONE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.BLACKSTONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BLACKSTONE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BLACKSTONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DEEPSLATE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.DEEPSLATE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DEEPSLATE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .input('#', Blocks.DEEPSLATE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DEEPSLATE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.DEEPSLATE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DEEPSLATE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.DEEPSLATE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.WARPED_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.WARPED_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.WARPED_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .input('#', Blocks.WARPED_PLANKS)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.WARPED_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.WARPED_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.WARPED_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.WARPED_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRIMSON_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.CRIMSON_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRIMSON_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .input('#', Blocks.CRIMSON_PLANKS)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRIMSON_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.CRIMSON_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRIMSON_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.CRIMSON_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BAMBOO_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BAMBOO_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BAMBOO_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .input('#', Blocks.BAMBOO_PLANKS)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BAMBOO_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.BAMBOO_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BAMBOO_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BAMBOO_PLANKS)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.NETHERRACK_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.NETHERRACK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.NETHERRACK_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .input('#', Blocks.NETHERRACK)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.NETHERRACK_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.NETHERRACK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.NETHERRACK_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.NETHERRACK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.END_STONE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.END_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.END_STONE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .input('#', Blocks.END_STONE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.END_STONE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.END_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.END_STONE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.END_STONE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BASALT_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BASALT)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BASALT_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .input('#', Blocks.BASALT)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BASALT_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.BASALT)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BASALT_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.BASALT)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DIORITE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.DIORITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DIORITE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .input('#', Blocks.DIORITE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DIORITE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.DIORITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DIORITE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.DIORITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.GRANITE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.GRANITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.GRANITE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .input('#', Blocks.GRANITE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.GRANITE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.GRANITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.GRANITE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.GRANITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ANDESITE_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.ANDESITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ANDESITE_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .input('#', Blocks.ANDESITE)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ANDESITE_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.ANDESITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ANDESITE_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.ANDESITE)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRYING_OBSIDIAN_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRYING_OBSIDIAN_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .input('#', Blocks.CRYING_OBSIDIAN)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRYING_OBSIDIAN_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRYING_OBSIDIAN_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OBSIDIAN_BOOTS)
                .pattern("   ")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.OBSIDIAN)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_boots"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OBSIDIAN_CHESTPLATE)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .input('#', Blocks.OBSIDIAN)
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_chestplate"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OBSIDIAN_HELMET)
                .pattern("###")
                .pattern("# #")
                .pattern("   ")
                .input('#', Blocks.OBSIDIAN)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_helmet"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OBSIDIAN_LEGGINGS)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Blocks.OBSIDIAN)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_leggings"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRYING_OBSIDIAN_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRYING_OBSIDIAN_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CRYING_OBSIDIAN_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CRYING_OBSIDIAN_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CRYING_OBSIDIAN_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CRYING_OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRYING_OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crying_obsidian_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OBSIDIAN_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OBSIDIAN_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.OBSIDIAN_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.OBSIDIAN_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.OBSIDIAN_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.OBSIDIAN)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OBSIDIAN))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "obsidian_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.END_STONE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.END_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.END_STONE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.END_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.END_STONE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.END_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.END_STONE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.END_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.END_STONE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.END_STONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.END_STONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "end_stone_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BLACKSTONE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.BLACKSTONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BLACKSTONE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.BLACKSTONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BLACKSTONE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BLACKSTONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BLACKSTONE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BLACKSTONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BLACKSTONE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BLACKSTONE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BLACKSTONE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "blackstone_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DEEPSLATE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.DEEPSLATE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DEEPSLATE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.DEEPSLATE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DEEPSLATE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DEEPSLATE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DEEPSLATE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DEEPSLATE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DEEPSLATE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DEEPSLATE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DEEPSLATE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "deepslate_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.NETHERRACK_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.NETHERRACK)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.NETHERRACK_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.NETHERRACK)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.NETHERRACK_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.NETHERRACK)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.NETHERRACK_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.NETHERRACK)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.NETHERRACK_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.NETHERRACK)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.NETHERRACK))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "netherrack_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DIORITE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.DIORITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DIORITE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.DIORITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DIORITE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DIORITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DIORITE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DIORITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DIORITE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DIORITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DIORITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "diorite_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.GRANITE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.GRANITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.GRANITE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.GRANITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.GRANITE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.GRANITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.GRANITE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.GRANITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.GRANITE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.GRANITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.GRANITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "granite_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ANDESITE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.ANDESITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ANDESITE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.ANDESITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.ANDESITE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.ANDESITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.ANDESITE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.ANDESITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.ANDESITE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.ANDESITE)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ANDESITE))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "andesite_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BASALT_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.BASALT)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BASALT_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.BASALT)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BASALT_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BASALT)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BASALT_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BASALT)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BASALT_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BASALT)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BASALT))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "basalt_shovel"));
        
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.OAK_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OAK_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.OAK_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.OAK_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.OAK_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "oak_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BIRCH_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BIRCH_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BIRCH_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.BIRCH_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BIRCH_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.BIRCH_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BIRCH_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BIRCH_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BIRCH_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BIRCH_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BIRCH_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "birch_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.SPRUCE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.SPRUCE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SPRUCE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.SPRUCE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.SPRUCE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.SPRUCE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.SPRUCE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.SPRUCE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.SPRUCE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.SPRUCE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.SPRUCE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "spruce_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.JUNGLE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.JUNGLE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.JUNGLE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.JUNGLE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.JUNGLE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.JUNGLE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.JUNGLE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.JUNGLE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.JUNGLE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.JUNGLE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.JUNGLE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "jungle_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DARK_OAK_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DARK_OAK_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.DARK_OAK_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DARK_OAK_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.DARK_OAK_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.DARK_OAK_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.DARK_OAK_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "dark_oak_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BAMBOO_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BAMBOO_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BAMBOO_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.BAMBOO_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.BAMBOO_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.BAMBOO_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BAMBOO_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BAMBOO_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.BAMBOO_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.BAMBOO_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.BAMBOO_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "bamboo_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.MANGROVE_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.MANGROVE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.MANGROVE_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.MANGROVE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.MANGROVE_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.MANGROVE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.MANGROVE_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.MANGROVE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.MANGROVE_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.MANGROVE_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.MANGROVE_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "mangrove_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CHERRY_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CHERRY_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CHERRY_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.CHERRY_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CHERRY_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.CHERRY_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CHERRY_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CHERRY_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CHERRY_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CHERRY_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CHERRY_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "cherry_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.ACACIA_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.ACACIA_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ACACIA_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.ACACIA_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.ACACIA_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.ACACIA_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.ACACIA_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.ACACIA_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.ACACIA_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.ACACIA_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.ACACIA_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "acacia_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CRIMSON_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CRIMSON_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRIMSON_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.CRIMSON_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.CRIMSON_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.CRIMSON_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CRIMSON_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CRIMSON_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.CRIMSON_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.CRIMSON_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.CRIMSON_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "crimson_shovel"));

        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.WARPED_PICKAXE)
                .pattern("###")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.WARPED_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_pickaxe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.WARPED_SWORD)
                .pattern(" # ")
                .pattern(" # ")
                .pattern(" I ")
                .input('#', Blocks.WARPED_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_sword"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, ModItems.WARPED_AXE)
                .pattern("## ")
                .pattern("#I ")
                .pattern(" I ")
                .input('#', Blocks.WARPED_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_axe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.WARPED_HOE)
                .pattern("## ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.WARPED_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_hoe"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, ModItems.WARPED_SHOVEL)
                .pattern(" # ")
                .pattern(" I ")
                .pattern(" I ")
                .input('#', Blocks.WARPED_PLANKS)
                .input('I', Items.STICK)
                .criterion("has_item", RecipeProvider.conditionsFromItem(Blocks.WARPED_PLANKS))
                .offerTo(exporter, Identifier.of(StoneWoodIndustry.MOD_ID, "warped_shovel"));


    }
}
